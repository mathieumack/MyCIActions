name: 'Nuget package'
description: 'Build and Deploy a .net library on nuget'
inputs:
  githubRef:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  githubHeadRef:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  githubRunNumber:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  nugetPackageIdentifier:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  nugetApiKey:  # id of input
    description: 'Who to greet'
    required: true
    secrets: true
    default: 'World'
  sonarOrganizationCode:  # id of input
    description: 'Who to greet'
    required: true
    secrets: true
    default: 'World'
  sonarProjectCode:  # id of input
    description: 'Who to greet'
    required: true
    secrets: true
    default: 'World'
  sonarToken:  # id of input
    description: 'Who to greet'
    required: true
    secrets: true
    default: 'World'
  publishToNuget:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
  githubToken:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
outputs:
  BUILD_VERSION:
    description: 'The time we greeted you'
  BUILD_VERSION_PREFIX:
    description: 'The time we greeted you'
runs:
  using: "composite"
  steps:
  # Show informations :
  - name: Show github context github ref
    shell: bash
    run: echo ${{ inputs.githubRef }}
  - name: Show github context github ref
    shell: bash
    run: echo ${{ github.ref }}
  - name: Show github context github head_ref
    shell: bash
    run: echo ${{ inputs.githubHeadRef }}
  - name: Show github context github run number
    shell: bash
    run: echo ${{ github.run_number }}
  - name: Show github context github head_ref
    shell: bash
    run: echo ${{ github.head_ref }}
  - name: Setup .NET
    uses: actions/setup-dotnet@v1
    with:
      dotnet-version: |
        6.0.x
        7.0.x
  - name: Restore dependencies
    shell: pwsh
    run: dotnet restore
    working-directory: src
  # Generate package version :
  - name: Generate package version
    id: generateVersionStep
    shell: pwsh
    run: |
      $version = .\generateVersion.ps1 -query ${{ inputs.nugetPackageIdentifier }}
      echo "::set-output name=BUILD_VERSION::$version"
    working-directory: .github/workflows/scripts
  - name: Generate package version prefix
    id: generateVersionPrefixStep
    shell: pwsh
    run: |
      if('${{ github.ref }}' -eq 'refs/heads/main') { echo "::set-output name=BUILD_VERSION_PREFIX::" }
      else { echo "::set-output name=BUILD_VERSION_PREFIX::-preview-${{ inputs.githubRunNumber }}" }
  # Build solution (and package nuget) 
  - name: Begin Sonar scan
    shell: pwsh
    run: |
      dotnet tool install --global dotnet-sonarscanner
      dotnet sonarscanner begin /k:${{ inputs.sonarOrganizationCode }}_${{ inputs.sonarProjectCode }} /o:${{ inputs.sonarOrganizationCode }} /d:sonar.login=${{ inputs.sonarToken }} /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="sonarqubecoverage.opencover.xml"
    working-directory: src
  - name: Build and analyze
    shell: pwsh
    run: |
      dotnet build --configuration Release --no-restore -p:FileVersion=${{ steps.generateVersionStep.outputs.BUILD_VERSION }} /p:Version=${{ steps.generateVersionStep.outputs.BUILD_VERSION }}${{ steps.generateVersionPrefixStep.outputs.BUILD_VERSION_PREFIX }}
    working-directory: src
  #- name: Launch unit tests
  #  run: dotnet test --configuration Release --no-build --verbosity normal /p:CollectCoverage=true  /p:CoverletOutputFormat=opencover --collect:"Code Coverage" /p:CoverletOutput="../sonarqubecoverage"
  #  working-directory: src
  - name: End Sonar scan
    shell: pwsh
    run: dotnet sonarscanner end /d:sonar.login=${{ inputs.sonarToken }}
    env:
      GITHUB_TOKEN: ${{ inputs.githubToken }}
    working-directory: src
  - uses: actions/upload-artifact@v3
    with:
      name: nuget-artifact
      path: src/**/*.nupkg
  # Publish a new version only for new features :
  - name: Push Package to NuGet.org
    shell: pwsh
    if: startswith(inputs.githubRef,'refs/heads/feature') || startswith(inputs.githubHeadRef,'feature/') || inputs.publishToNuget
    run: dotnet nuget push **.nupkg -k ${{ inputs.nugetApiKey }} -s https://api.nuget.org/v3/index.json
    working-directory: src